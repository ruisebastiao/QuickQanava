import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -v -nonrelocatable QuickQanava 2.0'

Module {
    dependencies: ["QtQuick 2.8"]
    Component {
        name: "qan::BottomRightResizer"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QuickQanava/BottomRightResizer 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "handler"; type: "QQuickItem"; isPointer: true }
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
        Property { name: "flickable"; type: "QQuickItem"; isPointer: true }
        Property { name: "handlerSize"; type: "QSizeF" }
        Property { name: "handlerColor"; type: "QColor" }
        Property { name: "handlerRadius"; type: "double" }
        Property { name: "handlerWidth"; type: "double" }
        Property { name: "minimumTargetSize"; type: "QSizeF" }
        Property { name: "autoHideHandler"; type: "bool" }
        Property { name: "preserveRatio"; type: "bool" }
        Property { name: "ratio"; type: "double" }
        Signal {
            name: "resizeStart"
            Parameter { name: "targetSize"; type: "QSizeF" }
        }
        Signal {
            name: "resizeEnd"
            Parameter { name: "targetSize"; type: "QSizeF" }
        }
    }
    Component {
        name: "qan::Connector"
        defaultProperty: "data"
        prototype: "qan::NodeItem"
        exports: ["QuickQanava/Connector 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "graph"; type: "qan::Graph"; isPointer: true }
        Property { name: "createDefaultEdge"; type: "bool" }
        Property { name: "hEdgeEnabled"; type: "bool" }
        Property { name: "connectorItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "edgeComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "edgeItem"; type: "qan::EdgeItem"; isReadonly: true; isPointer: true }
        Property { name: "sourcePort"; type: "qan::PortItem"; isPointer: true }
        Property { name: "sourceNode"; type: "qan::Node"; isPointer: true }
        Signal {
            name: "requestEdgeCreation"
            Parameter { name: "src"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dst"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "edgeInserted"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
        }
        Signal {
            name: "requestPortEdgeCreation"
            Parameter { name: "src"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "dst"; type: "qan::PortItem"; isPointer: true }
        }
    }
    Component {
        name: "qan::Edge"
        prototype: "QObject"
        exports: ["QuickQanava/AbstractEdge 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "graph"; type: "qan::Graph"; isReadonly: true; isPointer: true }
        Property { name: "item"; type: "qan::EdgeItem"; isReadonly: true; isPointer: true }
        Property { name: "inHNodes"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "label"; type: "string" }
        Property { name: "weight"; type: "double" }
        Method { name: "getSource"; type: "qan::Node*" }
        Method { name: "getDestination"; type: "qan::Node*" }
        Method { name: "getHDestination"; type: "qan::Edge*" }
    }
    Component {
        name: "qan::EdgeItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QuickQanava/EdgeItem 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "edge"; type: "qan::Edge"; isReadonly: true; isPointer: true }
        Property { name: "graph"; type: "qan::Graph"; isPointer: true }
        Property { name: "sourceItem"; type: "qan::NodeItem"; isPointer: true }
        Property { name: "destinationItem"; type: "qan::NodeItem"; isPointer: true }
        Property { name: "destinationEdge"; type: "qan::EdgeItem"; isPointer: true }
        Property { name: "hidden"; type: "bool"; isReadonly: true }
        Property { name: "p1"; type: "QPointF"; isReadonly: true }
        Property { name: "p2"; type: "QPointF"; isReadonly: true }
        Property { name: "c1"; type: "QPointF"; isReadonly: true }
        Property { name: "c2"; type: "QPointF"; isReadonly: true }
        Property { name: "dstAngle"; type: "double"; isReadonly: true }
        Property { name: "srcAngle"; type: "double"; isReadonly: true }
        Property { name: "dstA1"; type: "QPointF"; isReadonly: true }
        Property { name: "dstA2"; type: "QPointF"; isReadonly: true }
        Property { name: "dstA3"; type: "QPointF"; isReadonly: true }
        Property { name: "labelPos"; type: "QPointF" }
        Property { name: "style"; type: "qan::EdgeStyle"; isPointer: true }
        Property { name: "acceptDrops"; type: "bool" }
        Signal { name: "lineGeometryChanged" }
        Signal { name: "controlPointsChanged" }
        Signal { name: "arrowGeometryChanged" }
        Signal {
            name: "edgeClicked"
            Parameter { name: "edge"; type: "qan::EdgeItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeRightClicked"
            Parameter { name: "edge"; type: "qan::EdgeItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeDoubleClicked"
            Parameter { name: "edge"; type: "qan::EdgeItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeHoverMove"
            Parameter { name: "edge"; type: "qan::EdgeItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeHoverLeave"
            Parameter { name: "edge"; type: "qan::EdgeItem"; isPointer: true }
        }
        Method { name: "updateItemSlot" }
        Method { name: "isHyperEdge"; type: "bool" }
        Method {
            name: "setLine"
            Parameter { name: "src"; type: "QPoint" }
            Parameter { name: "dst"; type: "QPoint" }
        }
    }
    Component {
        name: "qan::EdgeStyle"
        prototype: "qan::Style"
        exports: ["QuickQanava/EdgeStyle 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "LineType"
            values: {
                "Straight": 0,
                "Curved": 1
            }
        }
        Property { name: "lineType"; type: "LineType" }
        Property { name: "lineColor"; type: "QColor" }
        Property { name: "lineWidth"; type: "double" }
        Property { name: "arrowSize"; type: "double" }
        Property { name: "dashed"; type: "bool" }
        Property { name: "dashPattern"; type: "QVector<qreal>" }
        Signal { name: "styleModified" }
    }
    Component {
        name: "qan::Graph"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QuickQanava/Graph 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SelectionPolicy"
            values: {
                "NoSelection": 0,
                "SelectOnClick": 1,
                "SelectOnCtrlClick": 2
            }
        }
        Property { name: "containerItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "connectorEdgeColor"; type: "QColor" }
        Property { name: "connectorColor"; type: "QColor" }
        Property { name: "connectorHEdgeEnabled"; type: "bool" }
        Property { name: "connectorCreateDefaultEdge"; type: "bool" }
        Property { name: "connectorItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "connectorEnabled"; type: "bool" }
        Property { name: "connector"; type: "qan::Connector"; isReadonly: true; isPointer: true }
        Property { name: "nodeDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "edgeDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "groupDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "nodes"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "edges"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "selectionPolicy"; type: "SelectionPolicy" }
        Property { name: "selectionColor"; type: "QColor" }
        Property { name: "selectionWeight"; type: "double" }
        Property { name: "selectionMargin"; type: "double" }
        Property { name: "selectedNodes"; type: "QAbstractListModel"; isReadonly: true; isPointer: true }
        Property { name: "selectedNode"; type: "qan::Node"; isPointer: true }
        Property { name: "styleManager"; type: "qan::StyleManager"; isReadonly: true; isPointer: true }
        Property { name: "portDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "horizontalDockDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "verticalDockDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal {
            name: "connectorRequestEdgeCreation"
            Parameter { name: "src"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dst"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "connectorEdgeInserted"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
        }
        Signal {
            name: "connectorRequestPortEdgeCreation"
            Parameter { name: "src"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "dst"; type: "qan::PortItem"; isPointer: true }
        }
        Signal {
            name: "nodeClicked"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "nodeRightClicked"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "nodeDoubleClicked"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeClicked"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeRightClicked"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeDoubleClicked"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "groupClicked"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "groupRightClicked"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "groupDoubleClicked"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "rightClicked"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "portClicked"
            Parameter { name: "port"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "portRightClicked"
            Parameter { name: "port"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "selectedNodeChanged"
            Parameter { name: "selectedNode"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "setSelectedNode"
            Parameter { name: "selectedNode"; type: "qan::Node"; isPointer: true }
        }
        Method { name: "qmlClearGraph" }
        Method {
            name: "graphChildAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "groupAt"
            type: "qan::Group*"
            Parameter { name: "p"; type: "QPointF" }
            Parameter { name: "s"; type: "QSizeF" }
        }
        Method {
            name: "setConnectorSource"
            Parameter { name: "sourceNode"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "insertNode"
            type: "qan::Node*"
            Parameter { name: "nodeComponent"; type: "QQmlComponent"; isPointer: true }
        }
        Method { name: "insertNode"; type: "qan::Node*" }
        Method {
            name: "removeNode"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
        }
        Method { name: "getNodeCount"; type: "int" }
        Method {
            name: "insertEdge"
            type: "qan::Edge*"
            Parameter { name: "source"; type: "QObject"; isPointer: true }
            Parameter { name: "destination"; type: "QObject"; isPointer: true }
            Parameter { name: "edgeComponent"; type: "QQmlComponent"; isPointer: true }
        }
        Method {
            name: "insertEdge"
            type: "qan::Edge*"
            Parameter { name: "source"; type: "QObject"; isPointer: true }
            Parameter { name: "destination"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "bindEdgeSource"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "outPort"; type: "qan::PortItem"; isPointer: true }
        }
        Method {
            name: "bindEdgeDestination"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "inPort"; type: "qan::PortItem"; isPointer: true }
        }
        Method {
            name: "bindEdge"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "outPort"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "inPort"; type: "qan::PortItem"; isPointer: true }
        }
        Method {
            name: "removeEdge"
            Parameter { name: "source"; type: "qan::Node"; isPointer: true }
            Parameter { name: "destination"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "removeEdge"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
        }
        Method {
            name: "hasEdge"
            type: "bool"
            Parameter { name: "source"; type: "qan::Node"; isPointer: true }
            Parameter { name: "destination"; type: "qan::Node"; isPointer: true }
        }
        Method { name: "insertGroup"; type: "qan::Group*" }
        Method {
            name: "removeGroup"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
        }
        Method { name: "getGroupCount"; type: "int" }
        Method {
            name: "groupNode"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "transformPosition"; type: "bool" }
        }
        Method {
            name: "groupNode"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "ungroupNode"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
        }
        Method {
            name: "ungroupNode"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "insertPort"
            type: "qan::PortItem*"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dock"; type: "qan::NodeItem::Dock" }
            Parameter { name: "portType"; type: "qan::PortItem::Type" }
            Parameter { name: "label"; type: "string" }
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "insertPort"
            type: "qan::PortItem*"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dock"; type: "qan::NodeItem::Dock" }
            Parameter { name: "portType"; type: "qan::PortItem::Type" }
            Parameter { name: "label"; type: "string" }
        }
        Method {
            name: "insertPort"
            type: "qan::PortItem*"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dock"; type: "qan::NodeItem::Dock" }
            Parameter { name: "portType"; type: "qan::PortItem::Type" }
        }
        Method {
            name: "insertPort"
            type: "qan::PortItem*"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dock"; type: "qan::NodeItem::Dock" }
        }
        Method {
            name: "removePort"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "port"; type: "qan::PortItem"; isPointer: true }
        }
        Method { name: "autoPositionNodes" }
    }
    Component {
        name: "qan::GraphView"
        defaultProperty: "data"
        prototype: "qan::Navigable"
        exports: ["QuickQanava/AbstractGraphView 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "graph"; type: "qan::Graph"; isPointer: true }
        Signal { name: "connectorChanged" }
        Signal {
            name: "rightClicked"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "nodeClicked"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "nodeRightClicked"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "nodeDoubleClicked"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "portClicked"
            Parameter { name: "port"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "portRightClicked"
            Parameter { name: "port"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeClicked"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeRightClicked"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeDoubleClicked"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "groupClicked"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "groupRightClicked"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "groupDoubleClicked"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
    }
    Component {
        name: "qan::Grid"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "thickColor"; type: "QColor" }
        Property { name: "gridWidth"; type: "double" }
        Property { name: "gridScale"; type: "double" }
        Property { name: "gridMajor"; type: "int" }
    }
    Component {
        name: "qan::Group"
        prototype: "QObject"
        exports: ["QuickQanava/AbstractGroup 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "graph"; type: "qan::Graph"; isReadonly: true; isPointer: true }
        Property { name: "item"; type: "qan::GroupItem"; isReadonly: true; isPointer: true }
        Property { name: "label"; type: "string" }
        Property { name: "draggable"; type: "bool" }
        Method {
            name: "hasNode"
            type: "bool"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
        }
    }
    Component {
        name: "qan::GroupItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QuickQanava/GroupItem 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "group"; type: "qan::Group"; isReadonly: true; isPointer: true }
        Property { name: "graph"; type: "qan::Graph"; isReadonly: true; isPointer: true }
        Property { name: "style"; type: "qan::Style"; isPointer: true }
        Property { name: "minimumSize"; type: "QSizeF" }
        Property { name: "resizable"; type: "bool" }
        Property { name: "selectable"; type: "bool" }
        Property { name: "selected"; type: "bool" }
        Property { name: "selectionItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "collapsed"; type: "bool" }
        Property { name: "draggable"; type: "bool" }
        Property { name: "dragged"; type: "bool" }
        Property { name: "droppable"; type: "bool" }
        Property { name: "acceptDrops"; type: "bool" }
        Property { name: "container"; type: "QQuickItem"; isPointer: true }
        Signal { name: "nodeDragEnter" }
        Signal { name: "nodeDragLeave" }
        Signal {
            name: "groupClicked"
            Parameter { name: "group"; type: "qan::GroupItem"; isPointer: true }
            Parameter { name: "p"; type: "QPointF" }
        }
        Signal {
            name: "groupDoubleClicked"
            Parameter { name: "group"; type: "qan::GroupItem"; isPointer: true }
            Parameter { name: "p"; type: "QPointF" }
        }
        Signal {
            name: "groupRightClicked"
            Parameter { name: "group"; type: "qan::GroupItem"; isPointer: true }
            Parameter { name: "p"; type: "QPointF" }
        }
    }
    Component {
        name: "qan::LineGrid"
        defaultProperty: "data"
        prototype: "qan::OrthoGrid"
        exports: ["QuickQanava/AbstractLineGrid 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "gridShape"; type: "QObject"; isPointer: true }
        Signal {
            name: "addLine"
            Parameter { name: "line"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "qan::Navigable"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QuickQanava/Navigable 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AutoFitMode"
            values: {
                "NoAutoFit": 0,
                "AutoFit": 1
            }
        }
        Property { name: "navigable"; type: "bool" }
        Property { name: "containerItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "isDraggable"; type: "bool" }
        Property { name: "containerSizeLocked"; type: "bool" }
        Property { name: "autoFitMode"; type: "AutoFitMode" }
        Property { name: "zoomIncrement"; type: "double" }
        Property { name: "zoom"; type: "double" }
        Property { name: "zoomOrigin"; type: "QQuickItem::TransformOrigin" }
        Property { name: "zoomMax"; type: "double" }
        Property { name: "zoomMin"; type: "double" }
        Property { name: "dragActive"; type: "bool" }
        Property { name: "viewPosition"; type: "QPointF" }
        Property { name: "grid"; type: "qan::Grid"; isPointer: true }
        Signal {
            name: "clicked"
            Parameter { name: "pos"; type: "QVariant" }
        }
        Signal {
            name: "rightClicked"
            Parameter { name: "pos"; type: "QVariant" }
        }
        Signal { name: "containerItemModified" }
        Signal {
            name: "isDraggableChanged"
            Parameter { name: "isDraggable"; type: "bool" }
        }
        Signal {
            name: "viewPositionChanged"
            Parameter { name: "viewPosition"; type: "QPointF" }
        }
        Signal {
            name: "containerSizeLockedChanged"
            Parameter { name: "containerSizeLocked"; type: "bool" }
        }
        Method {
            name: "setIsDraggable"
            Parameter { name: "isDraggable"; type: "bool" }
        }
        Method {
            name: "setViewPosition"
            Parameter { name: "viewPosition"; type: "QPointF" }
        }
        Method {
            name: "setContainerSizeLocked"
            Parameter { name: "containerSizeLocked"; type: "bool" }
        }
        Method {
            name: "centerOn"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method { name: "fitInView" }
        Method {
            name: "fitInItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "margin"; type: "int" }
        }
        Method {
            name: "fitInItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "zoomOn"
            Parameter { name: "center"; type: "QPointF" }
            Parameter { name: "zoom"; type: "double" }
        }
        Method {
            name: "panTo"
            Parameter { name: "target"; type: "QPointF" }
        }
        Method {
            name: "panOffset"
            Parameter { name: "delta"; type: "QPointF" }
        }
    }
    Component {
        name: "qan::NavigablePreview"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QuickQanava/AbstractNavigablePreview 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "qan::Navigable"; isPointer: true }
        Signal {
            name: "visibleWindowChanged"
            Parameter { name: "visibleWindowRect"; type: "QRectF" }
            Parameter { name: "navigableZoom"; type: "double" }
        }
    }
    Component {
        name: "qan::Node"
        prototype: "QObject"
        exports: ["QuickQanava/AbstractNode 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "graph"; type: "qan::Graph"; isReadonly: true; isPointer: true }
        Property { name: "item"; type: "qan::NodeItem"; isReadonly: true; isPointer: true }
        Property { name: "inNodes"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "outNodes"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "outEdges"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "label"; type: "string" }
        Property { name: "group"; type: "qan::Group"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "qan::NodeItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QuickQanava/NodeItem 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Connectable"
            values: {
                "Connectable": 0,
                "InConnectable": 1,
                "OutConnectable": 2,
                "UnConnectable": 3
            }
        }
        Enum {
            name: "Dock"
            values: {
                "Left": 0,
                "Top": 1,
                "Right": 2,
                "Bottom": 3
            }
        }
        Property { name: "node"; type: "qan::Node"; isReadonly: true; isPointer: true }
        Property { name: "graph"; type: "qan::Graph"; isReadonly: true; isPointer: true }
        Property { name: "minimumSize"; type: "QSizeF" }
        Property { name: "selectable"; type: "bool" }
        Property { name: "selected"; type: "bool" }
        Property { name: "selectionItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "resizable"; type: "bool" }
        Property { name: "ratio"; type: "double" }
        Property { name: "connectable"; type: "Connectable" }
        Property { name: "draggable"; type: "bool" }
        Property { name: "dragged"; type: "bool" }
        Property { name: "droppable"; type: "bool" }
        Property { name: "acceptDrops"; type: "bool" }
        Property { name: "style"; type: "qan::NodeStyle"; isPointer: true }
        Property { name: "complexBoundingShape"; type: "bool" }
        Property { name: "boundingShape"; type: "QPolygonF" }
        Property { name: "ports"; type: "QAbstractListModel"; isReadonly: true; isPointer: true }
        Property { name: "leftDock"; type: "QQuickItem"; isPointer: true }
        Property { name: "topDock"; type: "QQuickItem"; isPointer: true }
        Property { name: "rightDock"; type: "QQuickItem"; isPointer: true }
        Property { name: "bottomDock"; type: "QQuickItem"; isPointer: true }
        Signal {
            name: "nodeClicked"
            Parameter { name: "node"; type: "qan::NodeItem"; isPointer: true }
            Parameter { name: "p"; type: "QPointF" }
        }
        Signal {
            name: "nodeDoubleClicked"
            Parameter { name: "node"; type: "qan::NodeItem"; isPointer: true }
            Parameter { name: "p"; type: "QPointF" }
        }
        Signal {
            name: "nodeRightClicked"
            Parameter { name: "node"; type: "qan::NodeItem"; isPointer: true }
            Parameter { name: "p"; type: "QPointF" }
        }
        Signal { name: "requestUpdateBoundingShape" }
        Method {
            name: "findPort"
            type: "qan::PortItem*"
            Parameter { name: "portId"; type: "string" }
        }
    }
    Component {
        name: "qan::NodeStyle"
        prototype: "qan::Style"
        exports: ["QuickQanava/NodeStyle 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FillType"
            values: {
                "FillSolid": 1,
                "FillGradient": 2
            }
        }
        Enum {
            name: "EffectType"
            values: {
                "EffectNone": 0,
                "EffectShadow": 1,
                "EffectGlow": 2
            }
        }
        Property { name: "backRadius"; type: "double" }
        Property { name: "backOpacity"; type: "double" }
        Property { name: "fillType"; type: "FillType" }
        Property { name: "backColor"; type: "QColor" }
        Property { name: "baseColor"; type: "QColor" }
        Property { name: "borderColor"; type: "QColor" }
        Property { name: "borderWidth"; type: "double" }
        Property { name: "effectType"; type: "EffectType" }
        Property { name: "effectEnabled"; type: "bool" }
        Property { name: "effectColor"; type: "QColor" }
        Property { name: "effectRadius"; type: "double" }
        Property { name: "effectOffset"; type: "double" }
        Property { name: "fontPointSize"; type: "int" }
        Property { name: "fontBold"; type: "bool" }
    }
    Component {
        name: "qan::OrthoGrid"
        defaultProperty: "data"
        prototype: "qan::Grid"
        exports: ["QuickQanava/OrthoGrid 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "geometryComponent"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        name: "qan::PointGrid"
        defaultProperty: "data"
        prototype: "qan::OrthoGrid"
        exports: ["QuickQanava/AbstractPointGrid 2.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "qan::PortItem"
        defaultProperty: "data"
        prototype: "qan::NodeItem"
        exports: ["QuickQanava/PortItem 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "InOut": 0,
                "In": 1,
                "Out": 2
            }
        }
        Enum {
            name: "Multiplicity"
            values: {
                "Multiple": 0,
                "Single": 1
            }
        }
        Property { name: "type"; type: "Type"; isReadonly: true }
        Property { name: "multiplicity"; type: "Multiplicity" }
        Property { name: "dockType"; type: "qan::NodeItem::Dock"; isReadonly: true }
        Property { name: "label"; type: "string" }
        Signal {
            name: "outEdgeAdded"
            Parameter { name: "outEdgeItem"; type: "qan::EdgeItem&" }
        }
        Signal {
            name: "inEdgeAdded"
            Parameter { name: "inEdgeItem"; type: "qan::EdgeItem&" }
        }
        Signal {
            name: "inNonVisualEdgeAdded"
            Parameter { name: "inEdge"; type: "qan::Edge&" }
        }
        Signal {
            name: "outNonVisualEdgeAdded"
            Parameter { name: "inEdge"; type: "qan::Edge&" }
        }
    }
    Component {
        name: "qan::Style"
        prototype: "QObject"
        exports: ["QuickQanava/Style 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
    }
    Component {
        name: "qan::StyleManager"
        prototype: "QObject"
        exports: ["QuickQanava/StyleManager 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "styles"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Method { name: "clear" }
        Method {
            name: "setStyleComponent"
            Parameter { name: "style"; type: "qan::Style"; isPointer: true }
            Parameter { name: "component"; type: "QQmlComponent"; isPointer: true }
        }
        Method {
            name: "getStyleComponent"
            type: "QQmlComponent*"
            Parameter { name: "style"; type: "qan::Style"; isPointer: true }
        }
        Method {
            name: "getStyleAt"
            type: "qan::Style*"
            Parameter { name: "s"; type: "int" }
        }
    }
    Component {
        name: "qcm::AbstractContainer"
        prototype: "QObject"
        exports: ["QuickContainers/AbstractContainer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "model"; type: "ContainerModel"; isReadonly: true; isPointer: true }
    }
}
